{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Georgia;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 HelveticaNeue-Medium;\f4\fmodern\fcharset0 Courier;\f5\fnil\fcharset0 LucidaGrande;
\f6\fnil\fcharset0 Verdana;\f7\fswiss\fcharset0 ArialMT;\f8\fmodern\fcharset0 CourierNewPSMT;
\f9\froman\fcharset0 Times-Roman;\f10\ftech\fcharset77 Symbol;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red83\green83\blue83;\red34\green88\blue157;
\red109\green111\blue129;\red238\green246\blue250;\red135\green135\blue135;\red241\green241\blue241;\red234\green234\blue234;
\red109\green111\blue114;\red26\green26\blue26;\red0\green0\blue48;\red0\green1\blue166;\red66\green66\blue66;
\red218\green218\blue218;\red10\green81\blue168;\red191\green191\blue191;\red19\green19\blue19;\red17\green134\blue192;
\red134\green134\blue134;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid501\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid601\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 New Language that has pointers, but aren't messy \
\
\'93Entity Bean\'94 style pool\
\
Don\'92t have to worry about shallow or deep copy\
\
String equality is possible\
\
\
In method definition, can use ret keyword to declare more than one return value\
\
sample definition:\
\
public int HelloWorld(String input, input2) : ret (int output1, int output2)\
\{\
    \
   return (1,2);\
\}\
\
Implements access modifiers like java and c# of both classes and methods\
\
implements interface and abstract class like java\
\
public class Main implements MyInterface extends MyClass\
\
MAKE RECURSION EASIER (INCLUDING TAIL END)\
\
\
Web services like combination between modules\
\
Easily nest types within types\
\
Easy to use multidimensional arrays\
\
Better null pointer handling\
\
Automatic string conversion for output/input purposes (like Java toString)\
\
Doubly having primitives and classes of primitives like Java\
\
Garbage Collection is a plus\
\
\pard\pardeftab720

\f1\fs30 \cf2 \expnd0\expndtw0\kerning0
So-called "
\b \expnd0\expndtw0\kerning0
weak typing
\b0 \expnd0\expndtw0\kerning0
" \'e0 la JavaScript and PHP is a bigger problem but also less common. Consider JavaScript:\

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720

\f2\b\fs22 \cf3 \expnd0\expndtw0\kerning0
SHARE QUESTION\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "https://www.twitter.com/intent/tweet?related=quora&text=Question%20on%20%40Quora%3A%20What%20is%20the%20single%20worst%20feature%20in%20any%20programming%20language%3F&url=http%3A//www.quora.com/What-is-the-single-worst-feature-in-any-programming-language"}}{\fldrslt 
\b0\fs26 \cf4 \expnd0\expndtw0\kerning0
\
Twitter}}
\b0\fs26 \cf4 \expnd0\expndtw0\kerning0
\
\
Facebook\
\
Google+\
\pard\pardeftab720

\b\fs22 \cf3 \expnd0\expndtw0\kerning0
RELATED TOPICS\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Science-Engineering-and-Technology-1"}}{\fldrslt 
\f3\b0\fs26 \cf5 \expnd0\expndtw0\kerning0
Science, Engineering, and Technology}}
\f3\b0\fs26 \cf5 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Technology"}}{\fldrslt \cf5 Technology}}\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Software-and-Applications"}}{\fldrslt \cf5 Software and Applications}}\
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Computer-Programming"}}{\fldrslt Computer Programming}}\
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Programming-Languages"}}{\fldrslt Programming Languages}}\
\pard\pardeftab720

\f2\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\
What is the single worst feature in any programming language?
\b0\fs30 \expnd0\expndtw0\kerning0
\
Special consideration should be given to ones that are not needed in any language (hiding/not hiding stuff does not count)\
\pard\pardeftab720

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Want Answers
\f2\b \expnd0\expndtw0\kerning0
49
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\
\pard\pardeftab720

\b\fs22 \cf3 \expnd0\expndtw0\kerning0
22 ANSWERS\
\
\pard\pardeftab720

\b0\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Tikhon-Jelvis"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-9028071-50-pnzbndxwanutkusczmsijcxzgmitvwax.jpeg \width1000 \height1000 \noorient
}¬}\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
Tikhon Jelvis}}, studied programming languages and did...\'a0
\fs26 \cf7 \expnd0\expndtw0\kerning0
(more)
\b\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
152 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Rob-St-Amant"}}{\fldrslt \expnd0\expndtw0\kerning0
Rob St. Amant}}, Anonymous, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Dylan-Hirshkowitz"}}{\fldrslt \expnd0\expndtw0\kerning0
Dylan Hirshkowitz}}, (more)\
\pard\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
Intercal's 
\f4\fs26 \cf2 \cb8 \expnd0\expndtw0\kerning0
COME FROM
\f1\fs30 \cf2 \cb1 \expnd0\expndtw0\kerning0
 is a good candidate: it's the inverse of a 
\f4\fs26 \cf2 \cb8 \expnd0\expndtw0\kerning0
GOTO
\f1\fs30 \cf2 \cb1 \expnd0\expndtw0\kerning0
. It takes the execution state from a specified line to here. Of course, Intercal is a joke language, so it's not entirely fair to look at features from there.\
\
Intercal is actually a great case study of bad language design. It's bad on purpose which makes it funny rather than tragic. On this note, Google's {\field{\*\fldinst{HYPERLINK "http://cadie.googlecode.com/svn/trunk/INTERCAL-style-guide.html"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
INTERCAL Style Guide}} is a great read.\
\
From real languages, it's really hard to pick a 
\i \cf2 \expnd0\expndtw0\kerning0
single
\i0 \cf2 \expnd0\expndtw0\kerning0
 worst feature. There are just so many to choose from :P.\
\

\b \expnd0\expndtw0\kerning0
Nulls
\b0 \expnd0\expndtw0\kerning0
 everywhere would be a good candidate thanks to its pervasiveness\'97almost every single language has them. Some have nulls everywhere except for a blessed set of primitive types, which is even worse (Go, Java). It's Tony Hoare's famous "billion dollar mistake"\'97although, given how much the tech industry has grown since he said it, without fixing the problem, he was 
\b \expnd0\expndtw0\kerning0
significantly underestimating its cost
\b0 \expnd0\expndtw0\kerning0
.\
\
So-called "
\b \expnd0\expndtw0\kerning0
weak typing
\b0 \expnd0\expndtw0\kerning0
" \'e0 la JavaScript and PHP is a bigger problem but also less common. Consider JavaScript:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth8440\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\
2\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
if ("0") \{ log("a") \} else \{ log("b") \} // "a"
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
if ("0" == true) \{ log("a") \} else \{ log("b") \} // "b"
\fs30 \cb1 \expnd0\expndtw0\kerning0
\cell \lastrow\row
\pard\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
\
Or how about:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3140\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\
2\
3\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
"0" == false // true
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
"0" ==[] // true
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
[] == false // false
\fs30 \cb1 \expnd0\expndtw0\kerning0
\cell \lastrow\row
\pard\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
\
You get the idea: it's absolutely unpredictable. And it doesn't really gain you any meaningful expressiveness. \
\
Just take a look at the JS equality comparison table:\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-qimg-878013e6524cc5e3540efe104c08f3a1.png \width9700 \height9620 \noorient
}¬}\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\
If that doesn't scream "wanton complexity", I don't know what does!\
\
(Taken from {\field{\*\fldinst{HYPERLINK "http://dorey.github.io/JavaScript-Equality-Table/"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
JS Comparison Table}}, which is worth a look.)\
\
To make life more exciting, PHP also does implicit conversions, but in a different way. In JS:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth1100\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\
2\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
1 + "1"
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
11
\fs30 \cb1 \expnd0\expndtw0\kerning0
\cell \lastrow\row
\pard\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
\
in PHP:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth1100\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\
2\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
1 + "1"
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
2
\fs30 \cb1 \expnd0\expndtw0\kerning0
\cell \lastrow\row
\pard\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
.\
Yeah.\
\'a0\'a0\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Tikhon-Jelvis"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 4 Apr, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 9,015 views.\
\pard\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
152
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comments
\b\fs24 \cb9 \expnd0\expndtw0\kerning0
8+
\b0\fs26 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf7 \expnd0\expndtw0\kerning0
More Answers Below. 
\b \cf2 \expnd0\expndtw0\kerning0
Related Questions\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0
\b0 \cf4 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Haskell-programming-language/What-are-generalized-algebraic-datatypes-GADTs"}}{\fldrslt \expnd0\expndtw0\kerning0
\uc0\u8232 Haskell (programming language):\'a0What are generalized algebraic datatypes (GADTs)?}}\cf2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls1\ilvl0\cf4 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://www.quora.com/C-programming-language-2/How-can-a-programmer-limit-the-number-of-times-a-particular-software-feature-can-been-used"}}{\fldrslt \expnd0\expndtw0\kerning0
\uc0\u8232 C# (programming language):\'a0How can a programmer limit the number of times a particular software feature can been used?}}\cf2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls1\ilvl0\cf4 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Programming-Languages/What-is-syntactic-sugar"}}{\fldrslt \expnd0\expndtw0\kerning0
\uc0\u8232 Programming Languages:\'a0What is syntactic sugar?}}\cf2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls1\ilvl0\cf4 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Programming-Languages/Why-is-C++14-better-than-C++11-What-extra-features-are-added-there"}}{\fldrslt \expnd0\expndtw0\kerning0
\uc0\u8232 Programming Languages:\'a0Why is C++14 better than C++11? What extra features are added there?}}\cf2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls1\ilvl0\cf4 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://www.quora.com/C++-programming-language/What-are-the-features-of-C++-which-most-programmers-dont-know"}}{\fldrslt \expnd0\expndtw0\kerning0
\uc0\u8232 C++ (programming language):\'a0What are the features of C++ which most programmers don't know?}}\cf2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Richard-H-Schwartz"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-648786-50-spfgcbjzrqgfhhstvbemwqxnzlefwldp.jpeg \width1000 \height1000 \noorient
}¬}\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
Richard H. Schwartz}}, Experienced messaging, collaboration,...\'a0
\fs26 \cf7 \expnd0\expndtw0\kerning0
(more)
\b\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
37 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Travis-Hance"}}{\fldrslt \expnd0\expndtw0\kerning0
Travis Hance}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Brian-Bi"}}{\fldrslt \expnd0\expndtw0\kerning0
Brian Bi}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Ryan-Landay"}}{\fldrslt \expnd0\expndtw0\kerning0
Ryan Landay}}, (more)\
\pard\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
I have to admit, I've done some warped things in a variety of langauges, but I never did anything quite as warped as using the ALTER statement in COBOL.\
\
Where X and Y are labels, execution of the statement ALTER X TO PROCEED TO Y caused any subsequent branch to label X in a COBOL program to instead go to Y.\'a0 The existence of this feature meant that the target of every GO TO was potentially dynamic, with no syntactic clue local to either the branching-from or branching-to lines of code! You had to read the whole thing to know for sure that someone wasn't messing with your flow of control. (More like messing with your mind, IMHO!)\
\
SQL NULL.\'a0 Even though you have to support if you're writing a modern database, it introduces a ton of complexity in the engine and a whole lot of semantic badness.\'a0 \
\
In my last project, we dropped NULL storage support and made our embedded database engine smaller by almost 1/3, because we were able to get rid of "if something is NULL, do something weird, else do something normal" that had to be scattered up and down the code.\
\
We still had NULLs as something that could be fetched so we could support outerjoins, but we didn't allow them to be stored in the database or used with comparisons.\'a0 Few users complained once they figured out how to live without them.\
\
GOSUB from the BASIC language of my childhood.\'a0 More recent BASICs may have got rid of it, but GOSUB is like a procedure call without the ability to pass arguments.\'a0 All variables were global, and all parameter passing was through global variables.\'a0 It was 
\i \cf2 \expnd0\expndtw0\kerning0
horrible
\i0 \cf2 \expnd0\expndtw0\kerning0
.
\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\pard\pardeftab720

\f1\fs30 \cf2 \expnd0\expndtw0\kerning0
Global variables\
\
when reading code that uses lots of global variables, often there are tons of WTFs "from where this value comes from/where this is set". This problem grows exponentially with number of team members.\
\
Don't use global variables.\
\
MORE VERBOSE ERROR MESSAGES\
\
first, plenty of languages use \'84error codes" which are so notoriously unpleasant to check, and so easy to omit [and even in exception-aware languages, libraries which keep using error codes are fairly frequent];\
\
- then, even where there are exceptions, they usually are poor (poorly documented and designed classes, lack of information about possible exceptions, limited information available from exception objects, convoluted semantics of corner cases like exception during exception-caused object destruction etc etc)\
\
Unreseerved keywords in C# (and related languages)\
\
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth43380\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
assertEquality(addFloatingPointNumbers(new FloatingPointSuccessor(new FloatingPointSuccessor(new FloatingPointZero()))), FloatingPointSuccessor(new FloatingPointZero()), new FloatingPointSuccessor(new FloatingPointSuccessor(new FloatingPointSuccessor(new FloatingPointZero()))))
\fs30 \cb1 \expnd0\expndtw0\kerning0
\cell \lastrow\row
\pard\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
\
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clmgf \clvertalc \clshdrawnil \clwWidth1580\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clmrg \clvertalc \clshdrawnil \clwWidth1580\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
... uh, no. numeric literals are necessary for legibility. arithmetic operators avoid typos and bugs (if 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
_ / _
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
 meant actual division, that is!).\
\pard\intbl\itap1\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
2 + 1 == 3
\f1\fs30 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clmgf \clvertalc \clshdrawnil \clwWidth5780\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clmrg \clvertalc \clshdrawnil \clwWidth5780\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
in Java for example, people don't take this crap for numbers, they take some crap for strings, and they take a lot of crap for every other data-structure, like the ubiquitous lists and dicts.\
\pard\intbl\itap1\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\
2\
3\
\pard\intbl\itap1\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
List<Integer> list = new ArrayList();
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
list.add(1);
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
list.add(2);\
\
\
SHOULD FORCE NAMING CONVENTION\
\
NULL-TERMINATED STRING <- problem\
\
\
\pard\intbl\itap1\pardeftab720

\f1\fs30 \cf2 \cb1 \expnd0\expndtw0\kerning0
ByRef function arguments.\'a0 It shouldn't be possible to mutate state in the caller's context.\'a0 Functions should only return values in the normal manner, via the return result.\
\
\
\pard\intbl\itap1\pardeftab720

\f2\b\fs22 \cf3 \expnd0\expndtw0\kerning0
SHARE QUESTION\
{\field{\*\fldinst{HYPERLINK "https://www.twitter.com/intent/tweet?related=quora&text=Question%20on%20%40Quora%3A%20What%20is%20the%20single%20worst%20feature%20in%20any%20programming%20language%3F&url=http%3A//www.quora.com/What-is-the-single-worst-feature-in-any-programming-language"}}{\fldrslt 
\b0\fs26 \cf4 \expnd0\expndtw0\kerning0
\
Twitter}}
\b0\fs26 \cf4 \expnd0\expndtw0\kerning0
\
\
Facebook\
\
Google+\

\b\fs22 \cf3 \expnd0\expndtw0\kerning0
RELATED TOPICS\
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Science-Engineering-and-Technology-1"}}{\fldrslt 
\f3\b0\fs26 \cf5 \expnd0\expndtw0\kerning0
Science, Engineering, and Technology}}
\f3\b0\fs26 \cf5 \expnd0\expndtw0\kerning0
\
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Technology"}}{\fldrslt Technology}}\
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Software-and-Applications"}}{\fldrslt Software and Applications}}\
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Computer-Programming"}}{\fldrslt Computer Programming}}\
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Programming-Languages"}}{\fldrslt Programming Languages}}\

\f2\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\
What is the single worst feature in any programming language?
\b0\fs30 \expnd0\expndtw0\kerning0
\
Special consideration should be given to ones that are not needed in any language (hiding/not hiding stuff does not count)\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Want Answers
\f2\b \expnd0\expndtw0\kerning0
49
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\

\b\fs22 \cf3 \expnd0\expndtw0\kerning0
22 ANSWERS\
\

\b0\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Tikhon-Jelvis"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic 1__#$!@%!#__main-thumb-9028071-50-pnzbndxwanutkusczmsijcxzgmitvwax.jpeg \width1000 \height1000 \noorient
}¬}\cf4 \expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Tikhon Jelvis}}, studied programming languages and did...\'a0
\fs26 \cf7 \expnd0\expndtw0\kerning0
(more)
\b\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
152 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Rob-St-Amant"}}{\fldrslt \expnd0\expndtw0\kerning0
Rob St. Amant}}, Anonymous, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Dylan-Hirshkowitz"}}{\fldrslt \expnd0\expndtw0\kerning0
Dylan Hirshkowitz}}, (more)\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
Intercal's 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
COME FROM
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
 is a good candidate: it's the inverse of a 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
GOTO
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
. It takes the execution state from a specified line to here. Of course, Intercal is a joke language, so it's not entirely fair to look at features from there.\
\
Intercal is actually a great case study of bad language design. It's bad on purpose which makes it funny rather than tragic. On this note, Google's {\field{\*\fldinst{HYPERLINK "http://cadie.googlecode.com/svn/trunk/INTERCAL-style-guide.html"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
INTERCAL Style Guide}} is a great read.\
\
From real languages, it's really hard to pick a 
\i \cf2 \expnd0\expndtw0\kerning0
single
\i0 \cf2 \expnd0\expndtw0\kerning0
 worst feature. There are just so many to choose from :P.\
\
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
Nulls
\b0 \cf2 \expnd0\expndtw0\kerning0
 everywhere would be a good candidate thanks to its pervasiveness\'97almost every single language has them. Some have nulls everywhere except for a blessed set of primitive types, which is even worse (Go, Java). It's Tony Hoare's famous "billion dollar mistake"\'97although, given how much the tech industry has grown since he said it, without fixing the problem, he was 
\b \cf2 \expnd0\expndtw0\kerning0
significantly underestimating its cost
\b0 \cf2 \expnd0\expndtw0\kerning0
.\
\
So-called "
\b \cf2 \expnd0\expndtw0\kerning0
weak typing
\b0 \cf2 \expnd0\expndtw0\kerning0
" \'e0 la JavaScript and PHP is a bigger problem but also less common. Consider JavaScript:\

\itap2\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth8440\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap2\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\
2\nestcell 
\pard\intbl\itap2\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
if ("0") \{ log("a") \} else \{ log("b") \} // "a"
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
if ("0" == true) \{ log("a") \} else \{ log("b") \} // "b"
\fs30 \cb1 \expnd0\expndtw0\kerning0
\nestcell \lastrow\nestrow
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
\
Or how about:\

\itap2\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3140\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap2\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\
2\
3\nestcell 
\pard\intbl\itap2\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
"0" == false // true
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
"0" ==[] // true
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
[] == false // false
\fs30 \cb1 \expnd0\expndtw0\kerning0
\nestcell \lastrow\nestrow
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
\
You get the idea: it's absolutely unpredictable. And it doesn't really gain you any meaningful expressiveness. \
\
Just take a look at the JS equality comparison table:\
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
{{\NeXTGraphic 1__#$!@%!#__main-qimg-878013e6524cc5e3540efe104c08f3a1.png \width9700 \height9620 \noorient
}¬}\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\
If that doesn't scream "wanton complexity", I don't know what does!\
\
(Taken from {\field{\*\fldinst{HYPERLINK "http://dorey.github.io/JavaScript-Equality-Table/"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
JS Comparison Table}}, which is worth a look.)\
\
To make life more exciting, PHP also does implicit conversions, but in a different way. In JS:\

\itap2\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth1100\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap2\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\
2\nestcell 
\pard\intbl\itap2\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
1 + "1"
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
11
\fs30 \cb1 \expnd0\expndtw0\kerning0
\nestcell \lastrow\nestrow
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
\
in PHP:\

\itap2\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth1100\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap2\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\
2\nestcell 
\pard\intbl\itap2\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
1 + "1"
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
2
\fs30 \cb1 \expnd0\expndtw0\kerning0
\nestcell \lastrow\nestrow
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
.\
Yeah.\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Tikhon-Jelvis"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 4 Apr, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 9,015 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
152
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comments
\b\fs24 \cb9 \expnd0\expndtw0\kerning0
8+
\b0\fs26 \cf2 \cb1 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720
\cf7 \expnd0\expndtw0\kerning0
More Answers Below. 
\b \cf2 \expnd0\expndtw0\kerning0
Related Questions\
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0
\b0 \cf4 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Haskell-programming-language/What-are-generalized-algebraic-datatypes-GADTs"}}{\fldrslt \expnd0\expndtw0\kerning0
\uc0\u8232 Haskell (programming language):\'a0What are generalized algebraic datatypes (GADTs)?}}\cf2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls2\ilvl0\cf4 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://www.quora.com/C-programming-language-2/How-can-a-programmer-limit-the-number-of-times-a-particular-software-feature-can-been-used"}}{\fldrslt \expnd0\expndtw0\kerning0
\uc0\u8232 C# (programming language):\'a0How can a programmer limit the number of times a particular software feature can been used?}}\cf2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls2\ilvl0\cf4 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Programming-Languages/What-is-syntactic-sugar"}}{\fldrslt \expnd0\expndtw0\kerning0
\uc0\u8232 Programming Languages:\'a0What is syntactic sugar?}}\cf2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls2\ilvl0\cf4 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Programming-Languages/Why-is-C++14-better-than-C++11-What-extra-features-are-added-there"}}{\fldrslt \expnd0\expndtw0\kerning0
\uc0\u8232 Programming Languages:\'a0Why is C++14 better than C++11? What extra features are added there?}}\cf2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls2\ilvl0\cf4 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://www.quora.com/C++-programming-language/What-are-the-features-of-C++-which-most-programmers-dont-know"}}{\fldrslt \expnd0\expndtw0\kerning0
\uc0\u8232 C++ (programming language):\'a0What are the features of C++ which most programmers don't know?}}\cf2 \expnd0\expndtw0\kerning0
\uc0\u8232 \
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Richard-H-Schwartz"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic 1__#$!@%!#__main-thumb-648786-50-spfgcbjzrqgfhhstvbemwqxnzlefwldp.jpeg \width1000 \height1000 \noorient
}¬}\cf4 \expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Richard H. Schwartz}}, Experienced messaging, collaboration,...\'a0
\fs26 \cf7 \expnd0\expndtw0\kerning0
(more)
\b\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
37 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Travis-Hance"}}{\fldrslt \expnd0\expndtw0\kerning0
Travis Hance}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Brian-Bi"}}{\fldrslt \expnd0\expndtw0\kerning0
Brian Bi}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Ryan-Landay"}}{\fldrslt \expnd0\expndtw0\kerning0
Ryan Landay}}, (more)\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
I have to admit, I've done some warped things in a variety of langauges, but I never did anything quite as warped as using the ALTER statement in COBOL.\
\
Where X and Y are labels, execution of the statement ALTER X TO PROCEED TO Y caused any subsequent branch to label X in a COBOL program to instead go to Y.\'a0 The existence of this feature meant that the target of every GO TO was potentially dynamic, with no syntactic clue local to either the branching-from or branching-to lines of code! You had to read the whole thing to know for sure that someone wasn't messing with your flow of control. (More like messing with your mind, IMHO!)\
\
Fortunately, most programmers had the good sense to avoid using ALTER, but not everyone.\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Richard-H-Schwartz"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 6 May, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 1,738 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
37
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comments
\b\fs24 \cb9 \expnd0\expndtw0\kerning0
3+
\b0\fs26 \cf2 \cb1 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Greg-Kemnitz"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-5599507-50-AQCwZEfVkfYf5YOvGhdow6I6XBkRFas6.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Greg Kemnitz}}, wrote the innards of "the world's sma...\'a0
\fs26 \cf7 \expnd0\expndtw0\kerning0
(more)
\b\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
12 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Tikhon-Jelvis"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Tikhon Jelvis}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Mostafa-Hany-Gomaa"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Mostafa Hany Gomaa}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Rohit-Shinde-2"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Rohit Shinde}}, (more)\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
SQL NULL.\'a0 Even though you have to support if you're writing a modern database, it introduces a ton of complexity in the engine and a whole lot of semantic badness.\'a0 \
\
In my last project, we dropped NULL storage support and made our embedded database engine smaller by almost 1/3, because we were able to get rid of "if something is NULL, do something weird, else do something normal" that had to be scattered up and down the code.\
\
We still had NULLs as something that could be fetched so we could support outerjoins, but we didn't allow them to be stored in the database or used with comparisons.\'a0 Few users complained once they figured out how to live without them.\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Greg-Kemnitz"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 30 Aug, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 914 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
12
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comment\cf2 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Paul-Bone-1"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-7264042-50-x2tEWyt6DEQd43mgWPIObPIRcghkvhE2.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Paul Bone}}, Software Engineer, Specialising in pr...\'a0
\fs26 \cf7 \expnd0\expndtw0\kerning0
(more)
\b\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
20 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Greg-Kemnitz"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Greg Kemnitz}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Peter-Schachte"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Peter Schachte}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Toby-Thain"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Toby Thain}}, (more)\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
Tony Hoare (a very notable computer scientist)\'a0 invented the NULL reference (NULL pointer) in 1965.\'a0 He later described this as his Billion Dollar Mistake.\'a0 Non-nullable references, such as in Ada or in languages with discriminated union type systems prevent the programmer from assuming data will be available when either that assumption is incorrect or the data was not provided, both causing software to crash and placing extra responsibility on the programmer.\
\
The worst thing about this mistake is that many many languages have copied it, and we're _still_ making this mistake in new languages and it continues to cost us time effort and money.\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://lambda-the-ultimate.org/node/3186"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
http://lambda-the-ultimate.org/n...}}\
\'a0\'a0\
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Paul-Bone-1"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 9 Oct, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 2,892 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
20
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comments
\b\fs24 \cb9 \expnd0\expndtw0\kerning0
3+
\b0\fs26 \cf2 \cb1 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Peter-Schachte"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-38755752-50-rbzzodohkkqkrojwlgeprqtrjfhyeoiv.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Peter Schachte}}, I teach functional, logic, and object...\'a0
\fs26 \cf7 \expnd0\expndtw0\kerning0
(more)
\b\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
6 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Tikhon-Jelvis"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Tikhon Jelvis}}, Quora User, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Johan-Bj%C3%A4reholt"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Johan Bj\'e4reholt}}, (more)\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
GOSUB from the BASIC language of my childhood.\'a0 More recent BASICs may have got rid of it, but GOSUB is like a procedure call without the ability to pass arguments.\'a0 All variables were global, and all parameter passing was through global variables.\'a0 It was 
\i \cf2 \expnd0\expndtw0\kerning0
horrible
\i0 \cf2 \expnd0\expndtw0\kerning0
.\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Peter-Schachte"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 9 Sep, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 477 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
6
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comment
\b\fs24 \cb9 \expnd0\expndtw0\kerning0
1
\b0\fs26 \cf2 \cb1 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Tae-Lim-Kook"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-22660238-50-flt5rtoo4OSGnCFIcpsQPsoHAY7CiHl1.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Tae Lim Kook}}
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
20 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Travis-Hance"}}{\fldrslt \expnd0\expndtw0\kerning0
Travis Hance}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Oszk%C3%A1r-J%C3%B3zsa"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Oszk\'e1r J\'f3zsa}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Bogdan-Taranu-1"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Bogdan Taranu}}, (more)\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
One-based indexing.\
\
And TI-89 style fucked lists.\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Tae-Lim-Kook"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Updated 18 Oct, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 766 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
20
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comments
\b\fs24 \cb9 \expnd0\expndtw0\kerning0
4+
\b0\fs26 \cf2 \cb1 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Max-Lewin-1"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-44014968-50-jivkfiymmusjzslinunyzjtutqjluwcp.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Max Lewin}}, Computerologist
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
5 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Pavel-Vitsoft-%C5%A0ruba%C5%99"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Pavel Vitsoft \'8aruba\uc0\u345 }}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Oldrich-Svec"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Oldrich Svec}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Peter-Schachte"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Peter Schachte}}, (more)\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
I've never directly experienced the resulting "badness", but a teacher of mine had some pretty hilarious stories about it: In Fortran 77 variables starting with the letters 'i' through 'n'\'a0 would be implicitly typed to integers, while all other variables would be implicitly typed to reals. Not that you couldn't override with explicit typing, and indeed that quickly became an important best practice in Fortran to avoid triggering this "feature", but it nonetheless could lead to some real insidious bugs if you didn't know about it.\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Max-Lewin-1"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 5 Apr, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 872 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
5
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comments
\b\fs24 \cb9 \expnd0\expndtw0\kerning0
3
\b0\fs26 \cf2 \cb1 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Igor-Hlina"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-1563420-50-aaolUk9YscQVxRb3xyQhvGRnWAubYqqw.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Igor Hlina}}, Web applications designer
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
5 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Peter-Schachte"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Peter Schachte}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Johan-Bj%C3%A4reholt"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Johan Bj\'e4reholt}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Erik-Bj%C3%A4reholt"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Erik Bj\'e4reholt}}, (more)\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
Global variables\
\
when reading code that uses lots of global variables, often there are tons of WTFs "from where this value comes from/where this is set". This problem grows exponentially with number of team members.\
\
Don't use global variables.\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Igor-Hlina"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 27 Apr, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 466 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
5
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comments
\b\fs24 \cb9 \expnd0\expndtw0\kerning0
2
\b0\fs26 \cf2 \cb1 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Marco-Mariani"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-1081610-50-EvtPSHBetAasXj7TmlSCqU7XajPv2KrC.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Marco Mariani}}
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
6 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Richard-H-Schwartz"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Richard H. Schwartz}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Sunmit-Girme"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Sunmit Girme}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Asdr%C3%BAbal-Iv%C3%A1n-Su%C3%A1rez-Rivera"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Asdr\'fabal Iv\'e1n Su\'e1rez Rivera}}, (more)\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
My favourite from JavaScript:\
\
> new Date('2013-01-01').getMonth()\
> 0\
\
not because it's the worst feature, but because I can't fathom any possible rationale behind it :-)\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Marco-Mariani"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 16 May, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 406 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
6
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comments
\b\fs24 \cb9 \expnd0\expndtw0\kerning0
1+
\b0\fs26 \cf2 \cb1 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Nana-Ghartey"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-49382710-50-keaneplgxkeznukpcaypxmycahkgdtlf.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Nana Ghartey}}, Geek with Swag
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
11 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Aryeh-Friedman"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Aryeh Friedman}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Joran-Beasley"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Joran Beasley}}, Quora User, (more)\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
Python, c++, c#,java allowing the use of Unicode to define\'a0 variables,classes & functions Eg.for (int \uc0\u955  = 0; \u955  < 20; \u955 ++)\'a0 
\f5 \uc0\u1488 \u1500 \u1507 
\f1 +=\uc0\u955 ; return 
\f5 \uc0\u1488 \u1500 \u1507 
\f1 ;\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Nana-Ghartey"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 4 Apr, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 968 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
11
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comments
\b\fs24 \cb9 \expnd0\expndtw0\kerning0
2+
\b0\fs26 \cf2 \cb1 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Aryeh-Friedman"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-41754628-50-qexkewagcdvlwhbidiaisgkcnslmsare.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Aryeh Friedman}}, LeadDeveloper, PetiteCloud/ThinStorm
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
3 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Travis-Hance"}}{\fldrslt \expnd0\expndtw0\kerning0
Travis Hance}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/William-Chargin"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
William Chargin}}, and {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Eric-Bowersox"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Eric Bowersox}}.\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
Unreseerved keywords in C# (and related languages)\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Aryeh-Friedman"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 4 Apr, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 929 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
3
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comment\cf2 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Marcin-Kasperski-1"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-20926148-50-lcR5VgeZslvMam2A40fIBwkSYc4N5KbL.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Marcin Kasperski}}
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
3 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Tikhon-Jelvis"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Tikhon Jelvis}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Ricardo-Kagawa"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Ricardo Kagawa}}, and Quora User.\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
There are plenty, and my first instinct always depends on what I recently did (too-strict typing in case of C++, lack of signatures in Perl, UnicodeDecodeError in Python, \'85). But if we are too look wider, I\'92d name 
\b \cf2 \expnd0\expndtw0\kerning0
error handling:
\b0 \cf2 \expnd0\expndtw0\kerning0
\
\
- first, plenty of languages use \'84error codes" which are so notoriously unpleasant to check, and so easy to omit [and even in exception-aware languages, libraries which keep using error codes are fairly frequent];\
\
- then, even where there are exceptions, they usually are poor (poorly documented and designed classes, lack of information about possible exceptions, limited information available from exception objects, convoluted semantics of corner cases like exception during exception-caused object destruction etc etc)\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Marcin-Kasperski-1"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 5 Apr, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 708 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
3
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comment\cf2 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Andy-Dent"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-4528283-50-flf3w38js1Bxp7pvpkcf7xq0soDvOIKu.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Andy Dent}}, CTO of Touchgr.am, used C++, Objectiv...\'a0
\fs26 \cf7 \expnd0\expndtw0\kerning0
(more)
\b\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
1 upvote by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Jeff-Darcy"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Jeff Darcy}}.\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
TCL upvar and uplevel which allows a function to set a variable or evaluate code in the stack context N levels above it in the calling stack.\
\
\'a0see {\field{\*\fldinst{HYPERLINK "http://wiki.tcl.tk/4227"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
Practical Introduction to Upvar and Uplevel}} \
\
I first encountered this concept in the AppMaker GUI Code Generator V2 scripting language, which was otherwise a clean OO language. I wondered where the usually-sane and pragmatic author got the idea. Then a few years ago I started work on a CAD product which has its entire UI defined in and scripted by TCL.\
\
You wouldn't believe some of the code people can write in TCL using such features.\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Andy-Dent"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 28 Apr, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 389 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
1
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comment
\b\fs24 \cb9 \expnd0\expndtw0\kerning0
1
\b0\fs26 \cf2 \cb1 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Sam-Boosalis"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-2383711-50-UkOPCdRByTe95HttxGFOZyFd1gEIbcpO.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Sam Boosalis}}, wanderer, witness
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
5 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Tikhon-Jelvis"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Tikhon Jelvis}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Johnny-Ho"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Johnny Ho}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Vijay-Chidambaram"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Vijay Chidambaram}}, (more)\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
i'll add contempt for syntax (it's not worse than the semantics of weak types or no lambdas or no , but it hasn't been said). it's a feature because there are no operators to overload, thus easier to read, right?\
\

\itap2\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth43380\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap2\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\nestcell 
\pard\intbl\itap2\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
assertEquality(addFloatingPointNumbers(new FloatingPointSuccessor(new FloatingPointSuccessor(new FloatingPointZero()))), FloatingPointSuccessor(new FloatingPointZero()), new FloatingPointSuccessor(new FloatingPointSuccessor(new FloatingPointSuccessor(new FloatingPointZero()))))
\fs30 \cb1 \expnd0\expndtw0\kerning0
\nestcell \lastrow\nestrow
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
\
\
... uh, no. numeric literals are necessary for legibility. arithmetic operators avoid typos and bugs (if 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
_ / _
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
 meant actual division, that is!).\
\

\itap2\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth1580\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap2\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\nestcell 
\pard\intbl\itap2\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
2 + 1 == 3
\fs30 \cb1 \expnd0\expndtw0\kerning0
\nestcell \lastrow\nestrow
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
\
\
in Java for example, people don't take this crap for numbers, they take some crap for strings, and they take a lot of crap for every other data-structure, like the ubiquitous lists and dicts.\
\

\itap2\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5780\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap2\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\
2\
3\nestcell 
\pard\intbl\itap2\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
List<Integer> list = new ArrayList();
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
list.add(1);
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
list.add(2);
\fs30 \cb1 \expnd0\expndtw0\kerning0
\nestcell \lastrow\nestrow
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
\
\
there are good static fluent libraries (like Guava), but operators would be better.\
\

\itap2\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth2200\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap2\pardeftab720

\f4\fs26 \cf7 \expnd0\expndtw0\kerning0
1\
2\nestcell 
\pard\intbl\itap2\pardeftab720
\cf2 \cb8 \expnd0\expndtw0\kerning0
list += 3
\fs30 \cb1 \expnd0\expndtw0\kerning0
\

\fs26 \cb8 \expnd0\expndtw0\kerning0
list ++ [4, 5]
\fs30 \cb1 \expnd0\expndtw0\kerning0
\nestcell \lastrow\nestrow
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
\
\
and not just binary infix, the binary "out"fix (?) brackets with commas are the right way to write lists, because they're the easiest way to read lists. \
\
if operators are interfaces or typeclasses or something (not C++), used between alphanumerics (not APL), and well-documented, it's almost always easier for me read expressions of alphanumeric functions when mixed with symbolic operators.\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Sam-Boosalis"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 31 May, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 446 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
5
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comment\cf2 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Alexandru-Ifrim"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-10952717-50-JO3E0iY8IDZjncAccI3WWMF49hfs4nIj.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Alexandru Ifrim}}, Independent software developer
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
1 upvote by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Rui-Valente-Maia"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Rui Valente Maia}}.\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
One that comes to mind is case-insensitivity in method names (PHP for instance).\
\
Also on PHP, the use undeclared/implicit class members - can make development/debugging a pain if you mistype something.\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Alexandru-Ifrim"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 14 May, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 328 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
1
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comments
\b\fs24 \cb9 \expnd0\expndtw0\kerning0
1+
\b0\fs26 \cf2 \cb1 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Todd-A-Gibson"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-58367499-50-kzyyfstljxslkenkieqwehnohakwtqwa.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Todd A Gibson}}
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
2 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Brent-Collins-5"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Brent Collins}} and {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Shubham-Agrawal-131"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Shubham Agrawal}}.\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
From C (and C++), the null-terminated string. Here's a fascinating article on "The most expensive one-byte mistake"\'a0 {\field{\*\fldinst{HYPERLINK "http://queue.acm.org/detail.cfm?id=2010365"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
http://queue.acm.org/detail.cfm?...}}\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Todd-A-Gibson"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 23 Oct, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 176 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
2
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comment\cf2 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Phil-Jones"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-37297-50-dgtqcnmkodazheygmqszalirhunvfvkx.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Phil Jones}}, Still figuring it out
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
3 upvotes by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Will-Newton-1"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Will Newton}}, {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Tikhon-Jelvis"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Tikhon Jelvis}}, and {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Tae-Lim-Kook"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Tae Lim Kook}}.\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
See {\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-are-the-advantages-of-dynamic-scoping/answer/Phil-Jones"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
Phil Jones' answer to What are the advantages of dynamic scoping?}}\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Phil-Jones"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 4 Apr, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 908 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2\b \expnd0\expndtw0\kerning0
3
\b0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comment\cf2 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Mario-T-Lanza"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-17271116-50-ebjrlzmtgkxxfmvjxiohjjxzfwgkddvz.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Mario T. Lanza}}, Less is more
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
In {\field{\*\fldinst{HYPERLINK "http://vb.net/"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
VB.NET}}, ByRef function arguments.\'a0 It shouldn't be possible to mutate state in the caller's context.\'a0 Functions should only return values in the normal manner, via the return result.\
\'a0\'a0\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/What-is-the-single-worst-feature-in-any-programming-language/answer/Mario-T-Lanza"}}{\fldrslt 
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
Written 12 Oct, 2014}}
\f2\fs26 \cf7 \expnd0\expndtw0\kerning0
. 226 views.\
\pard\intbl\itap1\pardeftab720

\fs30 \cf2 \expnd0\expndtw0\kerning0
\

\f3\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
Upvote
\f2 \cf2 \cb1 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Downvote\cf2 \expnd0\expndtw0\kerning0
\
\cf7 \expnd0\expndtw0\kerning0
Comment\cf2 \expnd0\expndtw0\kerning0
\

\fs30 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.quora.com/Daia-Heinrich"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
{{\NeXTGraphic main-thumb-23560466-50-rqsfksxuejuenmcopuzypauskmmpnerl.jpeg \width1000 \height1000 \noorient
}¬}\expnd0\expndtw0\kerning0
\

\b \cf2 \expnd0\expndtw0\kerning0
Daia Heinrich}}, C monkey (C++ monkey)
\b \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\pardeftab720

\b0\fs26 \cf7 \expnd0\expndtw0\kerning0
1 upvote by {\field{\*\fldinst{HYPERLINK "http://www.quora.com/Amir-Sagiv"}}{\fldrslt \cf7 \expnd0\expndtw0\kerning0
Amir Sagiv}}.\

\fs30 \cf2 \expnd0\expndtw0\kerning0
\
\
\pard\intbl\itap1\pardeftab720

\f1 \cf2 \expnd0\expndtw0\kerning0
The string handling in C++. The basic way of string handling is just plain simple array of characters, where no equals or assignment operator is defined. Means that instead of 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
string1 == string2
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
 you have to write 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
strcmp(string1, string2) == 0
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
 and instead of 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
string1 = "abc"
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
 is it 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
strcpy(string1, "abc")
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
.\
Then you have an STL string type which avoids this inconvenients, but, in Windows Visual C++, the UI works with another string type, MFC CString, so you have to convert. \
Another "fun" thing is that CString in Unicode is UTF16 and STL Unicode string is UTF8 and there is no way to work with plain UTF8.\
\
HOW ABOUT STRING TYPE AS THE BASE?? (instead of list)\
\
Object->String->Float->Integer\
Object->String->Char Sequence->Char\
\
\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\pard\pardeftab720

\f6\b\fs26 \cf10 \expnd0\expndtw0\kerning0
10. Python
\b0 \cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720
\cf10 \expnd0\expndtw0\kerning0
What it is: A high level, all purpose programming language that prides itself on its readability. It\'92s often used as a scripting language, though it can also be compiled.\cf0 \expnd0\expndtw0\kerning0
\
\
\cf10 \expnd0\expndtw0\kerning0
Biggest complaint: Indentation is used to specify block structures rather than brackets or braces. Also, heavy use of colons and underscores and module/variable name collision.\cf0 \expnd0\expndtw0\kerning0
\
\
\cf10 \expnd0\expndtw0\kerning0
How To Get Rid: Don\'92t work at Google, Yahoo or NASA.\cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720

\b \cf10 \expnd0\expndtw0\kerning0
8. JavaScript
\b0 \cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720
\cf10 \expnd0\expndtw0\kerning0
What it is: An interpreted language, originally developed by Netscape, used primarily as a client-side scripting language on web pages. It\'92s also been implemented for server-side web scripting and as an embedded scripting language.\cf0 \expnd0\expndtw0\kerning0
\
\
\cf10 \expnd0\expndtw0\kerning0
Biggest complaints: Case sensitivity, different implementations across browsers, lack of debugging capabilities (though Firebug solves that) and odd inheritance rules.\cf0 \expnd0\expndtw0\kerning0
\
\
\cf10 \expnd0\expndtw0\kerning0
How To Get Rid: Don\'92t work as a web developer.\
\
\pard\pardeftab720

\b \cf10 \expnd0\expndtw0\kerning0
7. Tcl
\b0 \cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720
\cf10 \expnd0\expndtw0\kerning0
What it is: Developed as an embedded command language, the Tool Control Language has evolved into a general purpose scripting language used for things such as web applications, network administration and test automation.\cf0 \expnd0\expndtw0\kerning0
\
\
\cf10 \expnd0\expndtw0\kerning0
Biggest complaints: The syntax is almost too simple, it lacks pointers so there\'92s no way to pass by reference, arrays are stored as strings, it has poor list semantics and confusing variable scoping.\cf0 \expnd0\expndtw0\kerning0
\
\
\cf10 \expnd0\expndtw0\kerning0
How To Get Rid: Don\'92t work for Cisco, AOL or CNET or anyplace using AOLserver or the OpenACS platform.\
\
\pard\pardeftab720

\b \cf10 \expnd0\expndtw0\kerning0
5. C++
\b0 \cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720
\cf10 \expnd0\expndtw0\kerning0
What it is: An intermediate-level language created as an extension of C which supports, among other enhancements, object oriented programming. It remains one of the most popular languages, used in a wide variety of systems and applications.\cf0 \expnd0\expndtw0\kerning0
\
\
\cf10 \expnd0\expndtw0\kerning0
Biggest complaints: Too big of a feature set, manual memory management, slow compilation speed and the fact that it allows programmers to switch between object oriented and procedural code in the same program.\cf0 \expnd0\expndtw0\kerning0
\
\
\cf10 \expnd0\expndtw0\kerning0
How To Get Rid: Don\'92t work for Adobe, Google or the gaming industry, in general.\
\
\pard\pardeftab720

\b \cf10 \expnd0\expndtw0\kerning0
4. PHP
\b0 \cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720
\cf10 \expnd0\expndtw0\kerning0
What it is: An interpreted language most often used for server-side scripting to generate HTML pages dynamically. It can also be used as a stand alone scripting language on many operating systems.\cf0 \expnd0\expndtw0\kerning0
\
\
\cf10 \expnd0\expndtw0\kerning0
Biggest complaints: Inconsistent naming conventions for its many functions, security holes, no native support for Unicode, plus it often gets mixed in with presentation code (e.g., HTML, CSS).\cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720

\b \cf10 \expnd0\expndtw0\kerning0
3. Java
\b0 \cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720
\cf10 \expnd0\expndtw0\kerning0
What it is: An object-oriented language originally created for interactive television and one of the most popular programming languages in use today. Java code gets compiled into bytecode, which is then interpreted by a platform-specific Java Virtual Machine, meaning Java programs are \'93Write Once, Run Anywhere.\'94\cf0 \expnd0\expndtw0\kerning0
\
\
\cf10 \expnd0\expndtw0\kerning0
Biggest complaints: The syntax is too verbose, it\'92s slow, it\'92s not easy to pass functions, the API\'92s are over-engineered and lots of other languages can do what it does, but more efficiently.\cf0 \expnd0\expndtw0\kerning0
\
\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13200\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\f2\fs30 \cf11 \expnd0\expndtw0\kerning0
Objective-C.\
The annotations are confusing, using brackets to call methods still does not compute in my brain, and what is worse is that all of the library functions from C are called using the standard operators in C, -> and ., and it seems like the only company that is driving this language is Apple.\
I admit I have only used the language when programming for the iPhone (and looking into programming for OS X), but it feels as if C++ were merely forked, adding in annotations and forcing the implementation and the header files to be separate would make much more sense.\
\cell \lastrow\row
\pard\pardeftab720
\cf11 \expnd0\expndtw0\kerning0
Second place would be Scheme, which had exactly one variable type: the linked list. Trying to learn how to think in it is like trying to learn how to think like a polar bear if you're an American-born Martian. It's totally alien to everything else.\
\
\
BEST LANGUAGE FEATURES\
\
\
\pard\pardeftab720

\f7\fs52 \cf12 \expnd0\expndtw0\kerning0
10. Expression Bodied Methods\
\pard\pardeftab720

\fs26 \cf0 \expnd0\expndtw0\kerning0
How many times have you had to write a method just for one line of code? Now, with C# 6 you can simply create an expression bodied member with only the expression and without the curly braces or explicit returns.\
\pard\pardeftab720

\f8 \cf0 \expnd0\expndtw0\kerning0
class Employee\
\{\
   // Method with only the expression\
   public static int\
      CalculateMonthlyPay(int dailyWage)\
      => dailyWage * 30;\
\}\
\
\pard\pardeftab720

\f7\fs52 \cf12 \expnd0\expndtw0\kerning0
9. ?\'97Conditional Access Operator\
\pard\pardeftab720

\fs26 \cf0 \expnd0\expndtw0\kerning0
In earlier versions of the C# language, you always had to write the explicit if condition NULL checks before using an object or its property, as shown below.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0
\b\fs22 \cf13 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Post a comment
\b0 \cf0 \expnd0\expndtw0\kerning0
\
\ls3\ilvl0
\b \cf13 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://www.developer.com/e-mail/net/csharp/top-10-c-6.0-language-features.html"}}{\fldrslt \expnd0\expndtw0\kerning0
Email Article}}
\b0 \cf0 \expnd0\expndtw0\kerning0
\
\ls3\ilvl0
\b \cf13 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://www.developer.com/print/net/csharp/top-10-c-6.0-language-features.html"}}{\fldrslt \expnd0\expndtw0\kerning0
Print Article}}
\b0 \cf0 \expnd0\expndtw0\kerning0
\
\ls3\ilvl0
\b \cf13 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Share Articles
\b0 \cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\f8\fs26 \cf0 \expnd0\expndtw0\kerning0
private void GetMiddleName(Employee employee)\
\{\
   string employeeMiddleName = "N/A";\
\
   if (employee != null && employee.EmployeeProfile\
      != null)\
      employeeMiddleName =\
         employee.EmployeeProfile.MiddleName;\
\}\
\pard\pardeftab720

\f7 \cf0 \expnd0\expndtw0\kerning0
The same can be converted into a one-liner by using the Conditional Access Operator in C# 6.\
\pard\pardeftab720

\f8 \cf0 \expnd0\expndtw0\kerning0
private void GetMiddleName(Employee employee)\
\{\
   string employeeMiddleName =\
      employee?.EmployeeProfile?.MiddleName ?? "N/A";\
\}\
\pard\pardeftab720

\f7 \cf0 \expnd0\expndtw0\kerning0
Notice the default value provided on the same line of code.\
\
\pard\pardeftab720

\fs52 \cf12 \expnd0\expndtw0\kerning0
8. Auto-Property Initializers\
\pard\pardeftab720

\b\fs32 \cf12 \expnd0\expndtw0\kerning0
Related Articles\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls4\ilvl0
\b0\fs26 \cf13 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://www.developer.com/net/nintex-workflow-with-sharepoint-2013.html"}}{\fldrslt \expnd0\expndtw0\kerning0
Nintex Workflow with SharePoint 2013}}\cf0 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls4\ilvl0\cf13 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://www.developer.com/net/whats-new-in-windows-10-for-developers.html"}}{\fldrslt \expnd0\expndtw0\kerning0
What's New in Windows 10 for Developers}}\cf0 \expnd0\expndtw0\kerning0
\
\ls4\ilvl0\cf13 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://www.developer.com/net/becoming-a-sharepoint-hero-has-never-been-easier.html"}}{\fldrslt \expnd0\expndtw0\kerning0
Becoming a SharePoint Hero Has Never Been Easier}}\cf0 \expnd0\expndtw0\kerning0
\
\ls4\ilvl0\cf13 \kerning1\expnd0\expndtw0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://www.developer.com/net/managing-projects-backlog-with-visual-studio-online.html"}}{\fldrslt \expnd0\expndtw0\kerning0
Managing Projects Backlog with Visual Studio Online}}\cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
With the Auto-Property initialization feature, the developer can initialize properties without using a private set or the need for a local variable. Following is the sample source code.\
\pard\pardeftab720

\f8 \cf0 \expnd0\expndtw0\kerning0
class PeopleManager\
\{\
   public List<string> Roles \{ get; \} =\
      new List<string>() \{ "Employee", "Managerial"\};\
\
\pard\pardeftab720

\f7\fs52 \cf12 \expnd0\expndtw0\kerning0
7. Primary Constructor\
\pard\pardeftab720

\fs26 \cf0 \expnd0\expndtw0\kerning0
Primary Constructor is a feature in which you are allowed to pass the constructor parameters at the class declaration level instead of writing a separate constructor. The scope of the primary constructor parameters values is class level and will be available only at the time of class initialization. It comes to good use when it is used with the Auto-Property initializers.\
\pard\pardeftab720

\f8 \cf0 \expnd0\expndtw0\kerning0
// Primary constructor\
class Basket(string item, int price)\
\{\
   // Using primary constructor parameter values\
   // to do auto property initialization.\
   public string Item \{ get; \} = item;\
   public int Price \{ get; \} = price;\
\}\
\
\pard\pardeftab720

\f7\fs52 \cf12 \expnd0\expndtw0\kerning0
OUT Parameter Declaration During Method Call\
\pard\pardeftab720

\fs26 \cf0 \expnd0\expndtw0\kerning0
This is one of my favorites because I was feeling something not good about the separate declaration of the OUT parameter before the method call. This feature allows you to declare the OUT parameter during the method call, as shown below.\
\pard\pardeftab720

\f8 \cf0 \expnd0\expndtw0\kerning0
public bool ConvertToIntegerAndCheckForGreaterThan10\
   (string value)\
\{\
   if (int.TryParse(value, out int convertedValue)\
      && convertedValue > 10)\
   \{\
      return true;\
   \}\
\
   return false;\
\}\
\pard\pardeftab720

\f7 \cf0 \expnd0\expndtw0\kerning0
Note that the same out parameter is used in the consequent IF condition expression.\
\
\
\pard\pardeftab720

\fs52 \cf12 \expnd0\expndtw0\kerning0
Await in the Catch Block\
\pard\pardeftab720

\fs26 \cf0 \expnd0\expndtw0\kerning0
This is an important non-syntactic enhancement that will be available in C# 6. The await keyword can be called inside the catch and finally blocks. This opens up the way to perform an async exception handling or fallback process in case an exception happened during an async process call.\
\pard\pardeftab720

\f8 \cf0 \expnd0\expndtw0\kerning0
public async void Process()\
\{\
   try\
   \{\
      Processor processor = new Processor();\
      await processor.ProccessAsync();\
   \}\
   catch (Exception exception)\
   \{\
      ExceptionLogger logger = new ExceptionLogger();\
      // Catch operation also can be aync now!!\
      await logger.HandleExceptionAsync(exception);\
   \}\
\}\
\pard\pardeftab720

\f7 \cf0 \expnd0\expndtw0\kerning0
Exceptions can be filtered in the catch blocks with ease and cleanly with C# 6. Following is a sample source code where the intention is to handle all Exceptions except the SqlException type.\
\pard\pardeftab720

\f8 \cf0 \expnd0\expndtw0\kerning0
public async void Process()\
\{\
   try\
   \{\
      DataProcessor processor = ne\
   \}\
   // Catches and handles only non sql exceptions\
   catch (Exception exception) if(exception.GetType()\
      != typeof(SqlException))\
   \{\
      ExceptionLogger logger = new ExceptionLogger();\
      logger.HandleException(exception);\
   \}\
\}\
\pard\pardeftab720

\f7 \cf0 \expnd0\expndtw0\kerning0
This feature is something to make your code less cluttered and will reduce duplications. As with the namespaces, you can include a static class in the using statement similar to a namespace.\
\pard\pardeftab720

\f8 \cf0 \expnd0\expndtw0\kerning0
using System;\
// A static class inclusion\
using System.Console;\
\
namespace CSharp6Demo\
\{\
   class Program\
   \{\
      static void Main(string[] args)\
      \{\
         WriteLine("Console. is not required\
            as it is included in the usings!");\
      \}\
   \}\
\}\
\pard\pardeftab720

\f2\fs30 \cf11 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720

\f8\fs26 \cf0 \expnd0\expndtw0\kerning0
static void Main(string[] args)\
\{\
   string name = "Robert";\
   string car = "Audi";\
   WriteLine("\\\{name\}'s favourite car is\
      \{car\}!");\
\}
\f2\fs30 \cf11 \expnd0\expndtw0\kerning0
\
\
\
\
\pard\pardeftab720

\f9\fs48 \cf14 \expnd0\expndtw0\kerning0
+ is a concatenation operator in JavaScript\cf0 \
\pard\pardeftab720

\i\fs32 \cf14 \expnd0\expndtw0\kerning0
The head scratcher
\i0 \expnd0\expndtw0\kerning0
: The + operator is overloaded in JavaScript, being an addition operator for numbers and a concatenation operator for strings. If one operand is a string, JavaScript converts the other variable to a string and concatenation occurs, so that 
\i \expnd0\expndtw0\kerning0
\'911' + 1
\i0 \expnd0\expndtw0\kerning0
 yields 
\i \expnd0\expndtw0\kerning0
11
\i0 \expnd0\expndtw0\kerning0
.\

\i \expnd0\expndtw0\kerning0
The reason
\i0 \expnd0\expndtw0\kerning0
: This is ultimately due to JavaScript\'92s loose typing. Python, for example, also uses + for string concatenation but, being a strongly typed language, it will raise an error if one tries to add a string and an integer.\
\
\pard\pardeftab720
\cf14 \expnd0\expndtw0\kerning0
{{\NeXTGraphic slide_perl_module_true-620x465-100505011-gallery.idge.jpg \width12400 \height9300 \noorient
}¬}\pard\pardeftab720
\cf14 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf14 \cb15 \expnd0\expndtw0\kerning0
<img alt="Picture of a woman showing two thumbs up" src="http://images.techhive.com/images/idge/imported/imageapi/2014/10/08/18/slide_perl_module_true-620x465-100505011-gallery.idge.jpg" itemprop="image" />\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://images.techhive.com/images/idge/imported/imageapi/2014/10/08/18/slide_perl_module_true-620x465-100505011-orig.jpg"}}{\fldrslt 
\fs24 \cf16 \cb1 \expnd0\expndtw0\kerning0
See larger image}}
\fs24 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\i \cf7 \expnd0\expndtw0\kerning0
Image courtesy {\field{\*\fldinst{HYPERLINK "https://www.flickr.com/photos/62337512@N00/3958637561"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
flickr/anthony kelly}}\
\pard\pardeftab720

\i0\fs48 \cf14 \expnd0\expndtw0\kerning0
Perl modules must return TRUE\cf0 \
\pard\pardeftab720

\i\fs32 \cf14 \expnd0\expndtw0\kerning0
The head scratcher
\i0 \expnd0\expndtw0\kerning0
: Perl modules almost always end with the statement 
\i \expnd0\expndtw0\kerning0
1;\'a0
\i0 \expnd0\expndtw0\kerning0
and if they don\'92t, or, rather, if the last statement doesn\'92t {\field{\*\fldinst{HYPERLINK "http://returnvalues.useperl.at/"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
return a TRUE value}}, an error is raised.\

\i \expnd0\expndtw0\kerning0
The reason
\i0 \expnd0\expndtw0\kerning0
: Perl modules can contain initialization code as well as subroutines. After the file is loaded, {\field{\*\fldinst{HYPERLINK "http://perldoc.perl.org/functions/require.html"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
Perl checks that any such code executes successfully}} by looking for a return value of TRUE. Even if there is no initialization code, Perl still expects the final statement to return TRUE or it raises an exception.\
\
\pard\pardeftab720
\cf14 \expnd0\expndtw0\kerning0
{{\NeXTGraphic slide_c_pointer-620x465-100505016-gallery.idge.jpg \width4960 \height3720 \noorient
}¬}\pard\pardeftab720
\cf14 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf14 \cb15 \expnd0\expndtw0\kerning0
<img alt="Picture of a pointer dog pointing" src="http://images.techhive.com/images/idge/imported/imageapi/2014/10/08/18/slide_c_pointer-620x465-100505016-gallery.idge.jpg" itemprop="image" />\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://images.techhive.com/images/idge/imported/imageapi/2014/10/08/18/slide_c_pointer-620x465-100505016-orig.jpg"}}{\fldrslt 
\fs24 \cf16 \cb1 \expnd0\expndtw0\kerning0
See larger image}}
\fs24 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\i \cf7 \expnd0\expndtw0\kerning0
Image courtesy {\field{\*\fldinst{HYPERLINK "https://www.flickr.com/photos/jorunngro/4686710592"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
flickr/Blue
\f10\i0 \uc0\u9830 
\f9\i Gum}}\
\pard\pardeftab720

\i0\fs48 \cf14 \expnd0\expndtw0\kerning0
Array indexing in C behaves like pointer arithmetic\cf0 \
\pard\pardeftab720

\i\fs32 \cf14 \expnd0\expndtw0\kerning0
The head scratcher
\i0 \expnd0\expndtw0\kerning0
: In addition to referencing element 
\i \expnd0\expndtw0\kerning0
i
\i0 \expnd0\expndtw0\kerning0
 of array 
\i \expnd0\expndtw0\kerning0
a
\i0 \expnd0\expndtw0\kerning0
 as 
\i \expnd0\expndtw0\kerning0
a[i]
\i0 \expnd0\expndtw0\kerning0
, C also allows you to {\field{\*\fldinst{HYPERLINK "http://pw1.netcom.com/~tjensen/ptr/ch4x.htm"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
reference the same element as 
\i \expnd0\expndtw0\kerning0
i[a]}}.\

\i \expnd0\expndtw0\kerning0
The reason
\i0 \expnd0\expndtw0\kerning0
: In C, arrays act like pointers to blocks of memory, so 
\i \expnd0\expndtw0\kerning0
a[i]
\i0 \expnd0\expndtw0\kerning0
 = 
\i \expnd0\expndtw0\kerning0
*(a + i)
\i0 \expnd0\expndtw0\kerning0
 = 
\i \expnd0\expndtw0\kerning0
*(i + a)
\i0 \expnd0\expndtw0\kerning0
 = 
\i \expnd0\expndtw0\kerning0
i[a]
\i0 \expnd0\expndtw0\kerning0
.\

\i \expnd0\expndtw0\kerning0
Quotes
\i0 \expnd0\expndtw0\kerning0
: \'93... it is invaluable if you want to compete in the obfuscated C contest....\'94 {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/1995113/strangest-language-feature/1995278#comment1937772_1995156"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
Confusion}}\
\'93I don't see it as a feature - so much as exposing the core of what C is about. Its all about pointers and getting to the memory directly with as little indirection as possible. Kind of beautiful, really.\'94 \'a0{\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/1995113/strangest-language-feature/1995278#comment3634860_1995156"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
Michael Neale}}\cf16 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720
\cf14 \expnd0\expndtw0\kerning0
{{\NeXTGraphic slide_js_semicolon-620x465-100505018-gallery.idge.jpg \width12400 \height9300 \noorient
}¬}\pard\pardeftab720
\cf14 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf14 \cb15 \expnd0\expndtw0\kerning0
<img alt="Picture of punctuation marks made of pancakes" src="http://images.techhive.com/images/idge/imported/imageapi/2014/10/08/18/slide_js_semicolon-620x465-100505018-gallery.idge.jpg" itemprop="image" />\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://images.techhive.com/images/idge/imported/imageapi/2014/10/08/18/slide_js_semicolon-620x465-100505018-orig.jpg"}}{\fldrslt 
\fs24 \cf16 \cb1 \expnd0\expndtw0\kerning0
See larger image}}
\fs24 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\i \cf7 \expnd0\expndtw0\kerning0
Image courtesy {\field{\*\fldinst{HYPERLINK "https://www.flickr.com/photos/ixmati/4571280627"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
flickr/Nate Angell}}\
\pard\pardeftab720

\i0\fs48 \cf14 \expnd0\expndtw0\kerning0
JavaScripts automatic semicolon insertion\cf0 \
\pard\pardeftab720

\i\fs32 \cf14 \expnd0\expndtw0\kerning0
The head scratcher
\i0 \expnd0\expndtw0\kerning0
: JavaScript makes the use of semicolons to end certain statements optional by {\field{\*\fldinst{HYPERLINK "http://bclary.com/2004/11/07/#a-7.9.1"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
automatically inserting them}} where it thinks they belong, such as after line breaks. This often leads to errors or baffling behavior with no exceptions raised.\

\i \expnd0\expndtw0\kerning0
The reason
\i0 \expnd0\expndtw0\kerning0
: Semicolon insertion was meant as a convenience, to make JavaScript's C-like syntax easier for new developers.\

\i \expnd0\expndtw0\kerning0
Quotes
\i0 \expnd0\expndtw0\kerning0
: \'93You always run into problems when you design language features around the assumption that your users will mostly be idiots.\'94 {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/1995113/strangest-language-feature/1995278#comment1924259_2003277"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
Rob Van Dam}}\
\'93My advice: Figure out where the semicolons go, put them in the right place. You\'92ll be much better off.\'94 {\field{\*\fldinst{HYPERLINK "http://youtu.be/hQVTIJBZook?t=13m1s"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
Doug Crockford}}\
\'93Semicolon insertion is one of the m\
\
\
\pard\pardeftab720

\fs48 \cf14 \expnd0\expndtw0\kerning0
Javas autoboxing with Integer caching\cf0 \
\pard\pardeftab720

\i\fs32 \cf14 \expnd0\expndtw0\kerning0
The head scratcher
\i0 \expnd0\expndtw0\kerning0
: Java will automatically convert primitives types to objects ({\field{\*\fldinst{HYPERLINK "http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.7"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
autoboxing}}), such as int to an Integer object. It will also, by default, cache Integer objects for values from -128 and 127. This can lead to {\field{\*\fldinst{HYPERLINK "http://vanillajava.blogspot.com/2012/01/surprising-results-of-autoboxing.html"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
unexpected behavior}} when using == to compare autoboxed Integers with the same value (TRUE from -128 and 127; FALSE otherwise).\

\i \expnd0\expndtw0\kerning0
The reason
\i0 \expnd0\expndtw0\kerning0
: Autoboxing reduces the amount of code that developers need to write, while Integer caching improves performance.\

\i \expnd0\expndtw0\kerning0
Quotes
\i0 \expnd0\expndtw0\kerning0
: \'93Thats the result of premature optimization.\'94 {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/1995113/strangest-language-feature#comment3822538_2001861"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
Joschua}}\
\'93This isn't a common mistake, but it is a good reason to use the native Java types for numbers, booleans, etc\'85\'94 {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/18850930/java-integer-auto-auto-boxing#comment27813387_18850962"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
Ravi Wallau}}\
\'93So glad I'm a C# programmer.\'94 {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/1995113/strangest-language-feature#comment1926765_2001861"}}{\fldrslt \cf16 \expnd0\expndtw0\kerning0
Will}}\cf16 \expnd0\expndtw0\kerning0
\
\
GOOD STUFF:\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0
\f1\fs30 \cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
The 
\b \expnd0\expndtw0\kerning0
ability to pass functions in JavaScript
\b0 \expnd0\expndtw0\kerning0
 as arguments to other functions - makes things a lot easier. Functions are just objects with the additional ability of being invoked. You can write/design really beautiful generic templates/callback mechanisms as a result. I miss this in languages like Java.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0
\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Prototypal inheritance in JavaScript
\b0 \expnd0\expndtw0\kerning0
 - you create new objects by inheriting from other objects. Almost like copying all properties of the current object and tacking on more as you need. Pretty powerful but not well understood/embraced concept of inheritance. See: {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/a/16872315/609074"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
Page on stackoverflow.com}} for a beautiful elucidation of concept.\
\ls5\ilvl0
\b \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Pointers in C/C++
\b0 \expnd0\expndtw0\kerning0
. Some folks hate them but man, they are too good to pass up. You can screw up your system if you don't understand them, but if you do understand them, it screws with your mind, in a good way. You really understand how to use disparate locations of memory to structure correlated data in a meaningful way i.e., stacks/queues. Languages like Java, make you understand this at a high level.\
\ls5\ilvl0
\b \kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
Prefix operators/functions
\b0 \expnd0\expndtw0\kerning0
 in functional languages like LISP and its dialects. That is, you write 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
(myFunction arg1 arg2 arg3)
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
 in LISP instead of the infix/proper notation like 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
myFunction(arg1, arg2, arg3)
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
 in imperative languages - the benefits? Phenomenal! You have variable argument lists in a snap. Almost anything can be written as a function followed by 'n' number of arguments. Functions can easily be defined in terms of other functions. You basically have to think of applying the function 'recursively' to every argument. If it operates on a pair, then the return value of one execution along with the next argument and so on. This is just a crude overview. This lets you almost create everything with very very very minimal syntax. Quite powerful, mind bending and brilliant.\
\ls5\ilvl0
\b \kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
Unions in C: 
\b0 \expnd0\expndtw0\kerning0
I was always fascinated by them and they made sense with memory limitations and still do with embedded systems. I could have the following code: \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2660\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clvertalc \clshdrawnil \clbrdrt\brdrs\brdrw20\brdrcf17 \clbrdrl\brdrs\brdrw20\brdrcf17 \clbrdrb\brdrs\brdrw20\brdrcf17 \clbrdrr\brdrs\brdrw20\brdrcf17 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clbrdrt\brdrs\brdrw20\brdrcf17 \clbrdrl\brdrs\brdrw20\brdrcf17 \clbrdrb\brdrs\brdrw20\brdrcf17 \clbrdrr\brdrs\brdrw20\brdrcf17 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0
\f4\fs26 \cf7 \kerning1\expnd0\expndtw0 {\listtext	6	}\expnd0\expndtw0\kerning0
1\
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0\cf7 \kerning1\expnd0\expndtw0 {\listtext	7	}\expnd0\expndtw0\kerning0
2\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	8	}\expnd0\expndtw0\kerning0
3\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	9	}\expnd0\expndtw0\kerning0
4\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	10	}\expnd0\expndtw0\kerning0
5\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	11	}\expnd0\expndtw0\kerning0
6\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	12	}\expnd0\expndtw0\kerning0
7\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	13	}\expnd0\expndtw0\kerning0
8\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	14	}\expnd0\expndtw0\kerning0
9\
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0
\f1 \cf7 \kerning1\expnd0\expndtw0 {\listtext	15	}\expnd0\expndtw0\kerning0
\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0
\f4 \cf2 \cb8 \kerning1\expnd0\expndtw0 {\listtext	16	}\expnd0\expndtw0\kerning0
typedef union\{
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0
\fs26 \cf2 \kerning1\expnd0\expndtw0 {\listtext	17	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \cb8 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f4 \expnd0\expndtw0\kerning0
\'a0 struct\'a0\'a0\'a0 \{
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\ls5\ilvl0
\fs26 \kerning1\expnd0\expndtw0 {\listtext	18	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \cb8 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f4 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0 uint8_t a;
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\ls5\ilvl0
\fs26 \kerning1\expnd0\expndtw0 {\listtext	19	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \cb8 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f4 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0 uint8_t b;
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\ls5\ilvl0
\fs26 \kerning1\expnd0\expndtw0 {\listtext	20	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \cb8 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f4 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0 uint8_t c;
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\ls5\ilvl0
\fs26 \kerning1\expnd0\expndtw0 {\listtext	21	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \cb8 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f4 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0 uint8_t d;
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\ls5\ilvl0
\fs26 \kerning1\expnd0\expndtw0 {\listtext	22	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \cb8 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f4 \expnd0\expndtw0\kerning0
\'a0\'a0 \};
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\ls5\ilvl0
\fs26 \kerning1\expnd0\expndtw0 {\listtext	23	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \cb8 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f4 \expnd0\expndtw0\kerning0
 uint32_t num;
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\ls5\ilvl0
\fs26 \kerning1\expnd0\expndtw0 {\listtext	24	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \cb8 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f4 \expnd0\expndtw0\kerning0
\} my32BitInteger;
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\ls5\ilvl0
\fs26 \kerning1\expnd0\expndtw0 {\listtext	25	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \expnd0\expndtw0\kerning0
\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	26	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\fs30 \expnd0\expndtw0\kerning0
\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \cell \lastrow\row
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	27	}\expnd0\expndtw0\kerning0
I could either access the whole integer or just its individual bits (endianness will bite you in the rear if you don't handle it properly :) Another advantage is you can use it to store a bunch of different objects if you know you'll only be accessing one at given time. Saves lot of memory and you can keep destructing them at will i.e., reusing the same space!\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0
\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	28	}\expnd0\expndtw0\kerning0
Operator overloading in C++: 
\b0 \expnd0\expndtw0\kerning0
I seriously miss this feature in Java. The '+' is the only thing that's overloaded for strings, but can't be configured. It pains to write code like 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
matrix.setMatrix(matrix.getMatrix().addMatrix(someMatrix))
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
 instead of just 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
matrix = matrix + someMatrix
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
. That is self addition to another element of the same type just leads to kludgey code! I miss it in Java :'(\
\ls6\ilvl0
\b \kerning1\expnd0\expndtw0 {\listtext	29	}\expnd0\expndtw0\kerning0
Cons/Pairs in LISP: 
\b0 \expnd0\expndtw0\kerning0
Calling 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
(cons `a `b)
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
 in LISP creates a Pair of two elements. You can individually access each element using 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
car
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
 and 
\f4\fs26 \cb8 \expnd0\expndtw0\kerning0
cdr
\f1\fs30 \cb1 \expnd0\expndtw0\kerning0
 respectively. Now, you can define almost any complicated data structure with just this pair!! Each element of a pair could be a pair or every 
\i \expnd0\expndtw0\kerning0
cdr
\i0 \expnd0\expndtw0\kerning0
 could hold another pair and so on! If this is confusing, think of an equivalent in Java:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth160\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2820\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clvertalc \clshdrawnil \clbrdrt\brdrs\brdrw20\brdrcf17 \clbrdrl\brdrs\brdrw20\brdrcf17 \clbrdrb\brdrs\brdrw20\brdrcf17 \clbrdrr\brdrs\brdrw20\brdrcf17 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clbrdrt\brdrs\brdrw20\brdrcf17 \clbrdrl\brdrs\brdrw20\brdrcf17 \clbrdrb\brdrs\brdrw20\brdrcf17 \clbrdrr\brdrs\brdrw20\brdrcf17 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0
\f4\fs26 \cf7 \kerning1\expnd0\expndtw0 {\listtext	30	}\expnd0\expndtw0\kerning0
1\
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0\cf7 \kerning1\expnd0\expndtw0 {\listtext	31	}\expnd0\expndtw0\kerning0
2\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	32	}\expnd0\expndtw0\kerning0
3\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	33	}\expnd0\expndtw0\kerning0
4\
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0
\f1 \cf7 \kerning1\expnd0\expndtw0 {\listtext	34	}\expnd0\expndtw0\kerning0
\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0
\f4 \cf2 \cb8 \kerning1\expnd0\expndtw0 {\listtext	35	}\expnd0\expndtw0\kerning0
public class Pair\{
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0
\fs26 \cf2 \kerning1\expnd0\expndtw0 {\listtext	36	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \cb8 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f4 \expnd0\expndtw0\kerning0
\'a0 Object car;
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\ls6\ilvl0
\fs26 \kerning1\expnd0\expndtw0 {\listtext	37	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \cb8 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f4 \expnd0\expndtw0\kerning0
\'a0 Object cdr;
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\ls6\ilvl0
\fs26 \kerning1\expnd0\expndtw0 {\listtext	38	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \cb8 \expnd0\expndtw0\kerning0
\uc0\u8232 
\f4 \expnd0\expndtw0\kerning0
\}
\fs30 \cb1 \expnd0\expndtw0\kerning0
\
\ls6\ilvl0
\fs26 \kerning1\expnd0\expndtw0 {\listtext	39	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\f1 \expnd0\expndtw0\kerning0
\cell 
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	40	}\expnd0\expndtw0\kerning0
\uc0\u8232 
\fs30 \expnd0\expndtw0\kerning0
\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \cell \lastrow\row
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls7\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
You can then create arbitrary data structures using this! Simply brilliant! You also have macros and the like but I'm not so familiar with them so will leave that to the experts to answer.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls7\ilvl0
\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
TSL-like instructions in Assembly: 
\b0 \expnd0\expndtw0\kerning0
Now this may not be feature of the language per se, but more of the hardware, but you may assume Assembly is the language of the hardware. The TSL (Test-and-set) instruction guarantees atomicity to enable "safe" access of data in case of concurrency allowing systems built on "top of it" correct concurrency mechanisms! {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Test-and-set"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
Test-and-set}}\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls7\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\ls7\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
There are of course many more in other languages. I've given my 2 cents on the ones I like the most in the languages I've played around the most.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
\'a0\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6	}\expnd0\expndtw0\kerning0
There are plenty of extremely valuable advanced/modern features I appreciate and use - abstract types and inheritance for polymorphism, parameterized types for generic programming and covariance/contravariance, lambda closures for higher-order functions, lazy evaluation etc. But the single best feature for me is a very simple construct I fell in love with 3 decades ago and am still in love with - RECURSION. I am often surprised at how much people shy away from recursion especially when there is an opportunity to write tail-recursive code. Lastly, many of the advanced features I mentioned above when combined with recursion produce some of the most elegant code.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	7	}\expnd0\expndtw0\kerning0
\
\pard\tx720\pardeftab720

\f2 \cf11 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\fs32 \cf18 \expnd0\expndtw0\kerning0
If your computer program is your party list, than variables are the sticky notes you use to keep track of all the data you've collected. Without your sticky notes, you'd be at a loss as to how to move forward with planning. Without {\field{\*\fldinst{HYPERLINK "http://ruby.about.com/od/tutorials/ss/usevariables.htm"}}{\fldrslt \cf19 \expnd0\expndtw0\kerning0
\ul \ulc19 using variables}}, your Ruby program isn't able to keep track of its data either.\

\b\fs38 \expnd0\expndtw0\kerning0
Ruby Language Feature Number Two: {\field{\*\fldinst{HYPERLINK "http://ruby.about.com/od/rubyfeatures/a/arrayhash.htm"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul Arrays}}\

\b0\fs32 \expnd0\expndtw0\kerning0
Programs often have to manage collections of variables. Take for example, a program that manages your party information. You're bound to have party guests, each of whom must be stored in a variable and a list of which can be stored together in an array variable. That way you can access each guest via the {\field{\*\fldinst{HYPERLINK "http://ruby.about.com/od/af/g/array.htm"}}{\fldrslt \cf19 \expnd0\expndtw0\kerning0
\ul \ulc19 array}}.
\b\fs38 \expnd0\expndtw0\kerning0
\
Ruby Language Feature Number Three: {\field{\*\fldinst{HYPERLINK "http://ruby.about.com/od/rubyfeatures/a/hashes.htm"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul Hashes}}\

\b0\fs32 \expnd0\expndtw0\kerning0
Now imagine your party is a potluck event and each guest is required to bring a dish or other item. You'll still need a list of guests, which can be managed as an array, but you'll also need a way to keep track of what types of food are being brought. Additionally, you'll probably want to know who is bringing what.\
\pard\pardeftab720\qr
\cf20 \expnd0\expndtw0\kerning0
Ads\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://www.googleadservices.com/pagead/aclk?sa=L&ai=CmUpajyhdVZfPMNDf0AGK7oK4BMb-xKQGtra3mfwBsMeTgwgQBCCf_dggKAVgyYaMjNCk3BGgAdr__OUDyAEBqAMBqgSHAU_QuNMsjhOaOjpg8y8iTeDZcv_ZHA9Brk3LacSqNmIe6dPiYwanH2me_KJmX6i451koAJJzriU-hcS8oeT2FLOwnwoWbkIuAZuLve6iZsJlB2eKlqM5H-SiKQSrqKiWZ_vRH_X17t2bDkc3H99R5yQOoP4l0s0bgYAz-KHu32E_q1nz0-ohK4gGAYAHjoCDGqgHpr4b2AcB&num=3&cid=5GicgXf6PWnuCjDEvsO6Lyp_&sig=AOD64_0xJUobhencfMwwOgicKoNXmcryEA&client=ca-aj-about-premium&adurl=http://www.pluralsight.com/%3Fcreative%3D67632054678%26keyword%3D%26matchtype%3D%26network%3Dd%26device%3Dc"}}{\fldrslt \cf19 \expnd0\expndtw0\kerning0
Online Ruby Classes}}\cf18 \expnd0\expndtw0\kerning0
\
{\field{\*\fldinst{HYPERLINK "http://www.googleadservices.com/pagead/aclk?sa=L&ai=CmUpajyhdVZfPMNDf0AGK7oK4BMb-xKQGtra3mfwBsMeTgwgQBCCf_dggKAVgyYaMjNCk3BGgAdr__OUDyAEBqAMBqgSHAU_QuNMsjhOaOjpg8y8iTeDZcv_ZHA9Brk3LacSqNmIe6dPiYwanH2me_KJmX6i451koAJJzriU-hcS8oeT2FLOwnwoWbkIuAZuLve6iZsJlB2eKlqM5H-SiKQSrqKiWZ_vRH_X17t2bDkc3H99R5yQOoP4l0s0bgYAz-KHu32E_q1nz0-ohK4gGAYAHjoCDGqgHpr4b2AcB&num=3&cid=5GicgXf6PWnuCjDEvsO6Lyp_&sig=AOD64_0xJUobhencfMwwOgicKoNXmcryEA&client=ca-aj-about-premium&adurl=http://www.pluralsight.com/%3Fcreative%3D67632054678%26keyword%3D%26matchtype%3D%26network%3Dd%26device%3Dc"}}{\fldrslt \cf20 \expnd0\expndtw0\kerning0
www.pluralsight.com/Free-Trial}}\
Unlimited Access. 3500+ Courses. Free 10 Day Trial. Sign Up Now!\
{\field{\*\fldinst{HYPERLINK "http://www.googleadservices.com/pagead/aclk?sa=L&ai=C_SFzjyhdVZfPMNDf0AGK7oK4BKWgnrcE_Z7iq-ABxbrJ914QBSCf_dggKAVgyYaMjNCk3BGgAePTyP0DyAEBqAMBqgSHAU_Q6IEGjhWaOjpg8y8iTeDZcv_ZHA9Brk3LacSqNmIe6dPiYwanH2me_KJmX6i451koAJJzriU-hcS8oeT2FLOwnwoWbkIuAZuLve6iZsJlB2eKlqM5H-SmKQS4y4KmZ_vRH_X17t2bDkc3H99R5yQOoP4l0s0bgYAz-KHu32E_q1nzqIFfM4gGAYAHhay3AqgHpr4b2AcB&num=5&cid=5GicgXf6PWnuCjDEvsO6Lyp_&sig=AOD64_1v9YH2Afk0d8xBcFbSmBMWyiK1Ig&client=ca-aj-about-premium&adurl=http://www.MedicareSolutions.com/original.aspx%3Ftemp1%3D1%26refid%3Drem"}}{\fldrslt \cf19 \expnd0\expndtw0\kerning0
Medicare Health Plans}}\
{\field{\*\fldinst{HYPERLINK "http://www.googleadservices.com/pagead/aclk?sa=L&ai=C_SFzjyhdVZfPMNDf0AGK7oK4BKWgnrcE_Z7iq-ABxbrJ914QBSCf_dggKAVgyYaMjNCk3BGgAePTyP0DyAEBqAMBqgSHAU_Q6IEGjhWaOjpg8y8iTeDZcv_ZHA9Brk3LacSqNmIe6dPiYwanH2me_KJmX6i451koAJJzriU-hcS8oeT2FLOwnwoWbkIuAZuLve6iZsJlB2eKlqM5H-SmKQS4y4KmZ_vRH_X17t2bDkc3H99R5yQOoP4l0s0bgYAz-KHu32E_q1nzqIFfM4gGAYAHhay3AqgHpr4b2AcB&num=5&cid=5GicgXf6PWnuCjDEvsO6Lyp_&sig=AOD64_1v9YH2Afk0d8xBcFbSmBMWyiK1Ig&client=ca-aj-about-premium&adurl=http://www.MedicareSolutions.com/original.aspx%3Ftemp1%3D1%26refid%3Drem"}}{\fldrslt \cf20 \expnd0\expndtw0\kerning0
www.medicaresolutions.com}}\
Compare Medicare Insurance Plans. View All Plans & Prices Online.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls8\ilvl0\cf19 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://ruby.about.com/z/js/o.htm?k=ruby%20on%20rails&SUName=ruby&d=Ruby%20on%20Rails&r=http%3A%2F%2Fruby.about.com%2Fod%2Fbeginningruby%2Fa%2F5features.htm"}}{\fldrslt \expnd0\expndtw0\kerning0
Ruby on Rails}}\cf18 \expnd0\expndtw0\kerning0
\
\ls8\ilvl0\cf19 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://ruby.about.com/z/js/o.htm?k=ruby&SUName=ruby&d=Ruby&r=http%3A%2F%2Fruby.about.com%2Fod%2Fbeginningruby%2Fa%2F5features.htm"}}{\fldrslt \expnd0\expndtw0\kerning0
Ruby}}\cf18 \expnd0\expndtw0\kerning0
\
\ls8\ilvl0\cf19 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://ruby.about.com/z/js/o.htm?k=programming&SUName=ruby&d=Programming&r=http%3A%2F%2Fruby.about.com%2Fod%2Fbeginningruby%2Fa%2F5features.htm"}}{\fldrslt \expnd0\expndtw0\kerning0
Programming}}\cf18 \expnd0\expndtw0\kerning0
\
\ls8\ilvl0\cf19 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://ruby.about.com/z/js/o.htm?k=what%20programming%20language&SUName=ruby&d=What%20Programming%20Language&r=http%3A%2F%2Fruby.about.com%2Fod%2Fbeginningruby%2Fa%2F5features.htm"}}{\fldrslt \expnd0\expndtw0\kerning0
What Programming Language}}\cf18 \expnd0\expndtw0\kerning0
\
\ls8\ilvl0\cf19 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "http://ruby.about.com/z/js/o.htm?k=ruby%20web%20development&SUName=ruby&d=Ruby%20Web%20Development&r=http%3A%2F%2Fruby.about.com%2Fod%2Fbeginningruby%2Fa%2F5features.htm"}}{\fldrslt \expnd0\expndtw0\kerning0
Ruby Web Development}}\cf18 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf18 \expnd0\expndtw0\kerning0
Using a hash to store {\field{\*\fldinst{HYPERLINK "http://ruby.about.com/od/gl/g/keyvalue.htm"}}{\fldrslt \cf19 \expnd0\expndtw0\kerning0
\ul \ulc19 key/value}} pairs allows you to store that information. Say Susan is bringing chocolate cake to your party. The "key" will be "Susan" and the variable stored and accessed by the key (the value) will be "chocolate cake."
\b\fs38 \expnd0\expndtw0\kerning0
\
Ruby Language Feature Number Four: {\field{\*\fldinst{HYPERLINK "http://ruby.about.com/od/rubyfeatures/a/loops.htm"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul Loops}}\

\b0\fs32 \expnd0\expndtw0\kerning0
Computer programs often have to perform actions more than just once. For example, if your program prints all new information added to your pot luck list, it will need to print more than just a single time. This can be accomplished using a construct known as a {\field{\*\fldinst{HYPERLINK "http://ruby.about.com/od/rubyfeatures/a/loops.htm"}}{\fldrslt \cf19 \expnd0\expndtw0\kerning0
\ul \ulc19 loop}}.\

\b\fs38 \expnd0\expndtw0\kerning0
Ruby Language Feature Number Five: {\field{\*\fldinst{HYPERLINK "http://ruby.about.com/od/beginningruby/a/blocks.htm"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul Blocks}}\

\b0\fs32 \expnd0\expndtw0\kerning0
Blocks aren't anything new, especially to functional programmers. In the Ruby language, the use of these nameless {\field{\*\fldinst{HYPERLINK "http://ruby.about.com/od/mr/g/method.htm"}}{\fldrslt \cf19 \expnd0\expndtw0\kerning0
\ul \ulc19 methods}} is widespread and the block is one of the language's key features. They're often used to abstract the more tedious and repetitive loops into a more user-friendly forms.\
\

\fs30 \cf11 \expnd0\expndtw0\kerning0
\
}